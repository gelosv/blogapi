name: pipeline

on:
  push:
    branches: [ "master" ]
    paths:
      - 'src/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linter:
    runs-on: ubuntu-22.04
    steps:
      - name: 'Get code'
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.11.0
          cache: 'npm'
      - name: 'Install dependencies'
        run: npm ci --no-fund --no-audit
      - name: Linter
        run: npm run lint
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.11.0
          cache: 'npm'
      - name: Restart mysql
        run: sudo systemctl restart mysql
      - name: Install dependencies
        run: npm ci --no-fund --no-audit
      - name: status mysql
        run: sudo systemctl status mysql
      - name: Delete migration
        run: rm -rf prisma/migrations
      - name: Migrate database
        run: npm run migrate -- --name init
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - name: Generate prisma client
        run: npm run client
      - name: Test
        run: npm run test -- --silent
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
  build:
    needs: [linter, test]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build image
        run: docker build -f dockerfile.prod --build-arg JWT_KEY=${{ secrets.JWT_KEY }} --build-arg DATABASE_URL=${{ secrets.DATABASE_PROD }} -t ${{ secrets.DOCKERHUB_USERNAME }}/blogproduction .
      - name: Push image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/blogproduction
  # deploy:
  #   needs: [build]
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: AWS login
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Deploy to ECS
  #       run: aws ecs update-service --cluster Demo --service demoService --force-new-deployment 
